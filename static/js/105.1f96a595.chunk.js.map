{"version":3,"file":"static/js/105.1f96a595.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/SectionContactForm/SectionContactForm.module.css?8c57","components/SectionContactForm/SectionContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/SectionContacts/SectionContacts.module.css?39f1","components/SectionContacts/SectionContacts.jsx","webpack://goit-react-hw-08-phonebook/./src/components/App/App.module.css?583a","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\n\nconst selectContacts = state => state.contacts.items;\n\nconst selectFilter = state => state.filter;\n\nconst selectIsLoading = state => state.contacts.isLoading;\n\nconst selectError = state => state.contacts.error;\n\nconst selectRelevantContacts = createSelector([selectContacts, selectFilter], (contacts, filter) => {\n    \n        return contacts.filter(contact => contact.name.toLowerCase().includes(filter.trim().toLowerCase()));\n    }\n);\n\n\nexport { selectContacts, selectFilter, selectIsLoading, selectError, selectRelevantContacts }","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"SectionContactForm_section__CGE8n\",\"label\":\"SectionContactForm_label__AA9qL\",\"name\":\"SectionContactForm_name__kDIFZ\",\"number\":\"SectionContactForm_number__TbH0d\",\"massage\":\"SectionContactForm_massage__trMqp\",\"visually-hidden\":\"SectionContactForm_visually-hidden__THjAh\",\"btn\":\"SectionContactForm_btn__7oDIx\",\"error\":\"SectionContactForm_error__1JErt\",\"success\":\"SectionContactForm_success__NLv1G\"};","import { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/operations\";\nimport { selectContacts } from \"../../redux/contacts/selectors\";\nimport { toast } from \"react-toastify\";\nimport css from \"./SectionContactForm.module.css\";\n\nexport const SectionContactForm = () => {\n\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const onSubmitHandle = (e) => {\n\n        e.preventDefault();\n\n        const form = e.target;\n        const name = form.elements.name.value;\n        const phone = form.elements.number.value;\n\n        if (contacts.some(contact => contact.name === name)){\n            toast(`The contact <${name}> is elready existing!`, {closeButton: false, \n                                                                 ariaLabel: 'The contact is elready existing', \n                                                                 className: `${css.error}`});\n        } else {\n            dispatch(addContact({name, \"number\" : phone}));\n        }\n\n        form.reset();\n    }\n\n    return  <section className={css.section}>\n\n                <h2 className={css[\"visually-hidden\"]}>Form for adding new contacts</h2>\n\n                <form className={css.form} onSubmit={onSubmitHandle} >\n\n                    <label className={css.label} aria-label=\"Person name input\">Name\n                        <input  className={css.name}\n                                id=\"name\" \n                                type=\"text\" \n                                name=\"name\" \n                                required \n                                autoComplete=\"off\" \n                                placeholder=\"Name Sername\"\n                                pattern=\"^([a-zA-Z][ ]*){2,50}$\"\n                        />\n                        <p className={css.massage}>Name must be 2-50 chars long and contain only latin letters and whitespaces</p>\n                    </label>\n\n                    <label className={css.label} aria-label=\"Phone number input\">Phone\n                        <input  className={css.number}\n                                id=\"number\"\n                                type=\"tel\"\n                                name=\"number\"\n                                required\n                                autoComplete=\"off\"\n                                placeholder=\"xxx xxx xx xx\"\n                                pattern=\"^([0-9][ ]*){8,20}$\"\n                        />\n                        <p className={css.massage}>Phone number must be 8-20 chars long and contain only digits and whitespaces</p>\n                    </label>\n\n                    <button className={css.btn} type=\"submit\" aria-label=\"Add contact\">Add contact</button>\n\n                </form>\n\n            </section>\n                \n}\n","// extracted by mini-css-extract-plugin\nexport default {\"filter-label\":\"Filter_filter-label__memAx\",\"filter-input\":\"Filter_filter-input__dFgnI\",\"icon\":\"Filter_icon__YUraL\"};","import { useDispatch } from \"react-redux\";\nimport { setFilter } from \"../../redux/contacts/filterSlice\";\nimport {ImSearch} from 'react-icons/im';\nimport css from \"./Filter.module.css\";\n\nexport const Filter = () => {\n\n    const dispatch = useDispatch();\n        \n    const onChangeFilter = ({target}) => { dispatch(setFilter(target.value)) }\n\n    return  <label className={css[\"filter-label\"]}>\n\n                <input  className={css[\"filter-input\"]} \n                        type=\"text\"\n                        id=\"filter\"\n                        name=\"filter\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        autoComplete = \"off\"\n                        required\n                        onChange={onChangeFilter}\n                />\n\n                <ImSearch className={css.icon}/>\n\n            </label>\n}","// extracted by mini-css-extract-plugin\nexport default {\"contact-li\":\"ContactItem_contact-li__n5-9A\",\"contact-div\":\"ContactItem_contact-div__ucovh\",\"contact-name\":\"ContactItem_contact-name__fEa3c\",\"contact-number\":\"ContactItem_contact-number__odgLI\",\"contact-del-btn\":\"ContactItem_contact-del-btn__iMN3N\",\"contact-del-icon\":\"ContactItem_contact-del-icon__FgSM8\",\"delSuccess\":\"ContactItem_delSuccess__vlXsf\"};","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\nimport { IoIosClose } from \"react-icons/io\";\nimport css from './ContactItem.module.css';\nimport PropTypes from \"prop-types\";\n\nexport const ContactItem = ({id, name, number }) => {\n\n    const dispatch = useDispatch();\n    \n    return  <li className={css[\"contact-li\"]} id={id}>\n\n                <div className={css[\"contact-div\"]}>\n                    <p className={css[\"contact-name\"]}>{name}</p>\n                    <p className={css[\"contact-number\"]}>{number}</p>\n                </div>\n\n                <button className={css[\"contact-del-btn\"]} type=\"button\" onClick={() => {dispatch(deleteContact(id))}}>\n                    <IoIosClose className={css[\"contact-del-icon\"]}/> \n                </button>\n\n            </li>\n}\n\nContactItem.propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n}","// extracted by mini-css-extract-plugin\nexport default {\"contact-list\":\"ContactList_contact-list__GnW-D\",\"massage\":\"ContactList_massage__zvoWy\"};","import { useSelector } from \"react-redux\";\nimport { selectFilter, selectRelevantContacts } from \"../../redux/contacts/selectors\";\nimport { ContactItem } from \"../ContactItem/ContactItem\";\nimport { nanoid } from \"nanoid\";\nimport css from \"./ContactList.module.css\";\n\nexport const ContactList = () => {\n\n    const filter = useSelector(selectFilter);\n    const contacts = useSelector(selectRelevantContacts);\n    \n    return  <> \n            { (contacts.length > 0) \n                ?   <ul className={css[\"contact-list\"]}>\n                        { contacts.map( ({id, name, number}) => < ContactItem key={nanoid()} id={id} name={name} number={number}/> ) }\n                    </ul>\n                :   (filter.trim())\n                        ? <p className={css.massage}>There are no contacts you are looking for</p>\n                        : <p className={css.massage}>There are no contacts in the phone book yet</p>\n            }\n            </>\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"SectionContacts_section__JdwrP\",\"title\":\"SectionContacts_title__V7AcJ\"};","import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getContacts } from \"../../redux/contacts/operations\";\nimport { selectIsLoading, selectError } from \"../../redux/contacts/selectors\";\nimport {Filter} from \"../Filter/Filter\";\nimport {ContactList} from \"../ContactList/ContactList\";\nimport css from \"./SectionContacts.module.css\";\n\nexport const SectionContacts = () => {\n\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(()=>{\n        dispatch(getContacts());\n    }, [dispatch]);\n\n\n    return  <section className={css.section}>\n\n                <h2 className={css.title}>Contacts</h2>\n                \n                <Filter/>\n                \n                {isLoading && <b>Request in progress...</b>}\n\n                {error && <b>Opps! Something went wrong! Try reloading the page!</b>}\n                    \n                {(!isLoading && !error) && <ContactList />}\n\n            </section>\n}","// extracted by mini-css-extract-plugin\nexport default {\"book-container\":\"App_book-container__8oYEE\",\"title-h1\":\"App_title-h1__FObwy\"};","import { SectionContactForm } from \"../components/SectionContactForm/SectionContactForm\";\nimport { SectionContacts } from \"../components/SectionContacts/SectionContacts\";\nimport css from \"../components/App/App.module.css\";\n\nconst ContactsPage = () => {\n\n    return  <>\n                <h1 className={css[\"title-h1\"]}>Phonebook</h1>\n\n                <div className={css[\"book-container\"]}>\n\n                    <SectionContactForm className={css.section} />\n                    \n                    <SectionContacts className={css.section} />\n\n                </div>\n            </>   \n\n}\n\nexport default ContactsPage;"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectRelevantContacts","createSelector","contact","name","toLowerCase","includes","trim","SectionContactForm","useSelector","dispatch","useDispatch","_jsxs","className","css","section","children","_jsx","form","onSubmit","e","preventDefault","target","elements","value","phone","number","some","toast","closeButton","ariaLabel","addContact","reset","label","id","type","required","autoComplete","placeholder","pattern","massage","btn","Filter","title","onChange","_ref","setFilter","ImSearch","ContactItem","onClick","deleteContact","IoIosClose","ContactList","_Fragment","length","map","nanoid","SectionContacts","useEffect","getContacts","ContactsPage"],"sourceRoot":""}